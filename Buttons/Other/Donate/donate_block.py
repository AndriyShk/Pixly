import logging, config
from datetime import datetime
from aiogram import Bot, Router, types
from aiogram.types import CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F

bot = Bot(token=config.API_TOKEN)
router = Router()

class CardState(StatesGroup):
    waiting_for_number = State()

invoice_message_id = None

@router.callback_query(lambda c: c.data == 'donate')
async def donate(call: CallbackQuery):
    log_message = f"–î–æ–Ω–∞—Ç - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    logging.info(log_message)
    await bot.send_message(chat_id=config.LOGS, text=log_message)
    
    builder = InlineKeyboardBuilder()
    builder.button(text='‚≠êÔ∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ 1 –∑—ñ—Ä–∫—É', callback_data='send_star_1')
    builder.button(text='üåü –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ 10 –∑—ñ—Ä–æ–∫', callback_data='send_star_10')
    builder.button(text='üí´ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ 100 –∑—ñ—Ä–æ–∫', callback_data='send_star_100')
    builder.button(text='‚ú® –í–∫–∞–∑–∞—Ç–∏ –≤–ª–∞—Å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å', callback_data='send_custom_star')
    builder.button(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='other')
    builder.adjust(1)
    
    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text='üåü –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ –¥–æ–Ω–∞—Ç–æ–º:',
        reply_markup=builder.as_markup())

async def donate_return(call: CallbackQuery):
    log_message = f"–ü–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –î–æ–Ω–∞—Ç - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    logging.info(log_message)
    await bot.send_message(chat_id=config.LOGS, text=log_message)

    builder = InlineKeyboardBuilder()
    builder.button(text='‚≠êÔ∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ 1 –∑—ñ—Ä–∫—É', callback_data='send_star_1')
    builder.button(text='üåü –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ 10 –∑—ñ—Ä–æ–∫', callback_data='send_star_10')
    builder.button(text='üí´ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ 100 –∑—ñ—Ä–æ–∫', callback_data='send_star_100')
    builder.button(text='‚ú® –í–∫–∞–∑–∞—Ç–∏ –≤–ª–∞—Å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å', callback_data='send_custom_star')
    builder.button(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='other')
    builder.adjust(1)

    await bot.send_message(
        chat_id=call.message.chat.id,
        text='üåü –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ –¥–æ–Ω–∞—Ç–æ–º:',
        reply_markup=builder.as_markup())

@router.callback_query(lambda c: c.data.startswith('send_star_'))
async def send_star_invoice(call: CallbackQuery):
    if call.data == 'send_star_1':
        await call.message.delete()
        amount = 1
    elif call.data == 'send_star_10':
        await call.message.delete()
        amount = 10
    elif call.data == 'send_star_100':
        await call.message.delete()
        amount = 100
    else:
        return
    
    await send_custom_invoice(call, amount)

@router.callback_query(lambda c: c.data == 'send_custom_star')
async def send_custom_star(call: CallbackQuery, state: FSMContext):
    log_message = f"–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ send_custom_star - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    logging.info(log_message)
    await bot.send_message(chat_id=config.LOGS, text=log_message)
    
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data='cancel_payment')
    builder.adjust(1)

    sent_message = await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text='üëá –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω—É —Å—É–º—É:',
        reply_markup=builder.as_markup())
    
    await state.update_data(message_id=sent_message.message_id, call=call)
    await state.set_state(CardState.waiting_for_number)

@router.message(CardState.waiting_for_number)
async def card(message: types.Message, state: FSMContext):
    number = message.text.strip()

    data = await state.get_data()
    sent_message_id = data.get('message_id')

    if sent_message_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=sent_message_id)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    if not number.isdigit() or int(number) <= 0 or int(number) > 5000:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel_payment')
        builder.adjust(1)

        new_message = await bot.send_message(
            chat_id=message.chat.id,
            text="<b>‚õî –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è!</b> –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ!",
            parse_mode='html',
            reply_markup=builder.as_markup())
        
        await state.update_data(message_id=new_message.message_id)
        return

    call = data.get('call')
    if call:
        await send_custom_invoice(call=call, amount=int(number))
    await state.clear()
 
async def send_custom_invoice(call: CallbackQuery, amount: int):
    global invoice_message_id
    builder = InlineKeyboardBuilder() 
    builder.button(text=f"–û–ø–ª–∞—Ç–∏—Ç–∏ {amount} –∑—ñ—Ä–æ–∫", pay=True)
    builder.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–∫—É–ø–∫—É", callback_data="cancel_payment")
    builder.adjust(1)

    prices = [LabeledPrice(label="XTR", amount=amount)]

    invoice = await bot.send_invoice(
        chat_id=call.message.chat.id,
        title="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –±–æ—Ç–∞",
        description=f"–û–ø–ª–∞—Ç–∞ {amount} –∑—ñ—Ä–æ–∫ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –±–æ—Ç–∞.",
        payload=f"{amount}_stars",
        currency="XTR",
        prices=prices,
        reply_markup=builder.as_markup())
    invoice_message_id = invoice.message_id

@router.callback_query(lambda c: c.data == 'cancel_payment')
async def cancel_payment(call: CallbackQuery):
    await call.message.delete()
    await donate_return(call)

@router.pre_checkout_query(lambda query: True)
async def pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment(message: types.Message):
    global invoice_message_id

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=invoice_message_id)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —ñ–Ω–≤–æ–π—Å—É: {e}")

    builder = InlineKeyboardBuilder()
    builder.button(text='‚Ü©Ô∏è –ú–µ–Ω—é', callback_data='menu')
    builder.adjust(1)

    await message.answer("‚ù§Ô∏è –î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É!", reply_markup=builder.as_markup())
