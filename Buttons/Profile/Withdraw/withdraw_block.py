import logging, config, asyncio, html
from datetime import datetime
from aiogram import Bot, Router, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from Buttons.Profile.profile_block import profile
from Utils.check_sub_block import send_subscription, check_subscription
from db import (get_user, user_in_ban_list, add_active_order, update_balance, not_paid_1, not_paid_2, get_user_active_order, check_active_order, move_order_to_payed, move_order_to_rejected, update_withdrawing, has_active_order)

bot = Bot(token=config.API_TOKEN)
router = Router()

class CardState(StatesGroup):
    waiting_for_amount = State()

@router.callback_query(lambda c: c.data == 'withdraw')
async def withdraw(call: CallbackQuery, state: FSMContext):
    log_message = f"–í–∏–≤–µ—Å—Ç–∏ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    logging.info(log_message)
    await bot.send_message(chat_id=config.LOGS, text=log_message)

    user = get_user(call.from_user.id)
    user_ban = user_in_ban_list(call.from_user.id)
    balance = user[4]
    card = user[9]
    
    if user:
        if not user_ban:
            if not await check_subscription(call.from_user.id):
                await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                await send_subscription(call.message.chat.id)
                return
            
            if has_active_order(call.from_user.id):
                markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='profile')]])
                sent_message = await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'‚ùóÔ∏è<b>–£ –≤–∞—Å –≤–∂–µ —î –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ –≤–∏–ø–ª–∞—Ç—É!</b>\n\n–ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –≤–∏–ø–ª–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ!', parse_mode='html', reply_markup=markup)
                await state.update_data(message_id=sent_message.message_id)
                return
            
            if not card:
                markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='profile')]])
                sent_message = await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b>‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞!</b> –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∏.', parse_mode='html', reply_markup=markup)
                
                await state.update_data(message_id=sent_message.message_id)
                return

            if balance < config.MINIMUM_WITHDRAW:
                markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='profile')]])
                sent_message = await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'‚ùóÔ∏è<b>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—å {config.MINIMUM_WITHDRAW} {config.CURRENCY}.</b>\n\n–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤.', parse_mode='html', reply_markup=markup)
                
                await state.update_data(message_id=sent_message.message_id)
                return

            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data='cancel_withdraw')]])
            sent_message = await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'üëá –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–≤–µ—Å—Ç–∏:', reply_markup=markup)
            
            await state.update_data(message_id=sent_message.message_id)
            await state.set_state(CardState.waiting_for_amount)
        else:
            await call.answer(config.BAN_MESSAGE, show_alert=True)
    else:
       await call.answer(config.BAN_MESSAGE, show_alert=True)

@router.message(StateFilter(CardState.waiting_for_amount))
async def withdraw_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        user = get_user(message.from_user.id)
        balance = user[4]
        card = user[9]
        
        data = await state.get_data()
        previous_message_id = data.get('message_id')
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        
        if amount > balance:
            error_message = await message.answer(text=f'‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} {config.CURRENCY}', parse_mode='html')
            await asyncio.sleep(5)
            await bot.delete_message(chat_id=error_message.chat.id, message_id=error_message.message_id)
            return
        
        if amount < config.MINIMUM_WITHDRAW:
            error_message = await message.answer(text=f'‚ùóÔ∏è –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–∞ {config.MINIMUM_WITHDRAW} {config.CURRENCY}', parse_mode='html')
            await asyncio.sleep(5)
            await bot.delete_message(chat_id=error_message.chat.id, message_id=error_message.message_id)
            return
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data=f'confirm_withdraw_{amount}')],
            [InlineKeyboardButton(text='‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data='cancel_button')]])

        sent_message = await bot.edit_message_text(chat_id=message.chat.id, message_id=previous_message_id, text=f'<b>‚öôÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:</b>\n\nüí∂ –°—É–º–∞: {amount} {config.CURRENCY}\nüí≥ –ö–∞—Ä—Ç–∞: <code>{card}</code>', reply_markup=markup, parse_mode='html')
        await state.update_data(message_id=sent_message.message_id)
        await state.clear()

    except ValueError:
        user = get_user(message.from_user.id)
        error_message = await message.answer(text='<b>–£–ø—Å... ü•≤</b>\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è.', parse_mode='html')

        await asyncio.sleep(5)
        await bot.delete_message(chat_id=error_message.chat.id, message_id=error_message.message_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

@router.callback_query(lambda c: c.data.startswith('cancel_button'))
async def cancel_button(call: CallbackQuery):
    log_message = f"–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    logging.info(log_message)
    await bot.send_message(chat_id=config.LOGS, text=log_message)
    
    user = get_user(call.from_user.id)
    user_ban = user_in_ban_list(call.from_user.id)

    if user:
        if not user_ban:
            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='profile')]])
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞', reply_markup=markup)
        else:
            await call.answer(config.BAN_MESSAGE, show_alert=True)
    else:
       await call.answer(config.BAN_MESSAGE, show_alert=True)

@router.callback_query(lambda c: c.data.startswith('confirm_withdraw_'))
async def confirm_withdraw(call: CallbackQuery):
    log_message = f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    logging.info(log_message)
    await bot.send_message(chat_id=config.LOGS, text=log_message)

    user = get_user(call.from_user.id)
    user_ban = user_in_ban_list(call.from_user.id)
    
    user_id = user[0]
    first_name = html.escape(user[2])
    amount = int(call.data.split('_')[2])
    card = user[9]
    
    if user:
        if not user_ban:
            created_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            active_order = check_active_order(call.from_user.id)
        
            if active_order:
                await call.answer("‚ùóÔ∏è –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –π–æ–≥–æ –æ–±—Ä–æ–±–∫–∏.", show_alert=True)
                return
            add_active_order(call.from_user.id, amount, card, "‚åõÔ∏è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è...", created_at)

            admin_text = (f"<b>üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {first_name}\n"
                          f"<b>üÜî ID:</b> <code>{user_id}</code>\n"
                          f"<b>üí∂ –°—É–º–∞:</b> {amount} {config.CURRENCY}\n"
                          f"<b>üí≥ –ö–∞—Ä—Ç–∞:</b> <code>{card}</code>")
            
            confirm_button = InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—á–µ–Ω–æ', callback_data=f'paid_{user[0]}_{amount}')
            reject_button = InlineKeyboardButton(text='‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data=f'not_paid_{user[0]}_{amount}')
            
            markup = InlineKeyboardMarkup(inline_keyboard=[[confirm_button],[reject_button]])
            await bot.send_message(chat_id=config.PAYOUTS_CHANNEL_ID, text=admin_text, parse_mode='html', reply_markup=markup)
            
            confirmation_text = (
                f"<b>‚öôÔ∏è–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤:</b>\n\n"
                f"<b>üí∂ –°—É–º–∞:</b> {amount} {config.CURRENCY}\n"
                f"<b>üí≥ –ö–∞—Ä—Ç–∞:</b> <code>{card}</code>\n\n"
                f"‚ùóÔ∏è–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")

            update_balance(call.from_user.id, amount)

            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='profile')]])
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='html', text=confirmation_text, reply_markup=markup)
        else:
            await call.answer(config.BAN_MESSAGE, show_alert=True)
    else:
        await call.answer(config.BAN_MESSAGE, show_alert=True)

@router.callback_query(lambda c: c.data.startswith('cancel_withdraw'))
async def cancel_withdraw(call: CallbackQuery):
    await profile(call)

@router.callback_query(lambda c: c.data.startswith('paid_') and len(c.data.split('_')) == 3)
async def paid(call: CallbackQuery):
    log_message = f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –≤ –æ–ø–ª–∞—Ç—ñ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    logging.info(log_message)
    await bot.send_message(chat_id=config.LOGS, text=log_message)
    
    data = call.data.split('_')
    user_id = int(data[1])
    amount = int(data[2])
    
    try:
        order = get_user_active_order(user_id)
        if order:
            user_data = get_user(user_id)
            
            move_order_to_payed(user_id, order)

            first_name = user_data[2]
            update_withdrawing(amount, user_id)

            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚è∫ –ó–∞–∫—Ä–∏—Ç–∏', callback_data='close_button')]])
            await bot.send_message(chat_id=user_id, text=f'<b>‚úÖ –í–∞—à–µ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ!</b>\n\nüéØ –ó–∞–ª–∏—à—Ç–µ –≤—ñ–¥–≥—É–∫, –±—É–¥—å –ª–∞—Å–∫–∞: {config.ADMIN_USERNAME[0]}', parse_mode='html', reply_markup=markup)
        
            channel_confirmation_text = (f"‚úÖ –í–∏–ø–ª–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞:\n\n"
                                    f"üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {html.escape(first_name)}\n"
                                    f"üí∏ <b>–°—É–º–∞:</b> {amount} {config.CURRENCY}\n")

            await bot.send_message(chat_id=config.CHAT_WITHDRAW, text=channel_confirmation_text, parse_mode='html')
            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        else:
            print("–û—Ä–¥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ –∑ –æ–ø–ª–∞—Ç–æ—é –æ—Ä–¥–µ—Ä–∞:", repr(e))

@router.callback_query(lambda c: c.data.startswith('not_paid_'))
async def not_paid(call: CallbackQuery):
    log_message = f"–í—ñ–¥—Ö–∏–ª–µ–Ω–æ –≤ –æ–ø–ª–∞—Ç—ñ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    logging.info(log_message)
    await bot.send_message(chat_id=config.LOGS, text=log_message)
    
    data = call.data.split('_')
    user_id = data[2]
    amount = int(data[3])

    try:
        order = get_user_active_order(user_id)
        if order:
            user_balance = not_paid_1(user_id)
            if user_balance:
                move_order_to_rejected(user_id, order)
                not_paid_2(user_balance, amount, user_id)
            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚è∫ –ó–∞–∫—Ä–∏—Ç–∏', callback_data='close_button')]])
            await bot.send_message(chat_id=user_id, text=f'<b>‚ùå –í–∞—à –≤–∏–≤—ñ–¥ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ!</b>\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö!', parse_mode='html', reply_markup=markup)
            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        
        else:
            print("–û—Ä–¥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ –∑ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è–º –æ—Ä–¥–µ—Ä–∞:", repr(e))
